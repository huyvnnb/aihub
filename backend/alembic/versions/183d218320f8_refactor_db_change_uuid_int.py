"""refactor db: change uuid -> int

Revision ID: 183d218320f8
Revises: 033302a04635
Create Date: 2025-06-02 16:08:52.125475

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '183d218320f8'
down_revision: Union[str, None] = '033302a04635'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # --- PERMISSIONS: ID to BIGINT IDENTITY, Timestamps to TIMESTAMPTZ ---
    op.add_column('permissions', sa.Column('id_new', sa.BigInteger, nullable=True))
    op.execute("""
        WITH numbered AS (SELECT ctid, ROW_NUMBER() OVER (ORDER BY created_at) + 9999 AS new_id FROM permissions)
        UPDATE permissions p SET id_new = n.new_id FROM numbered n WHERE p.ctid = n.ctid;
    """)
    op.alter_column('permissions', 'id_new', existing_type=sa.BigInteger,
                    nullable=False)  # SET NOT NULL before IDENTITY
    op.execute("ALTER TABLE permissions ALTER COLUMN id_new ADD GENERATED ALWAYS AS IDENTITY (START WITH 10000);")

    op.alter_column('permissions', 'created_at', type_=sa.DateTime(timezone=True), existing_type=postgresql.TIMESTAMP(),
                    existing_nullable=False)
    op.alter_column('permissions', 'updated_at', type_=sa.DateTime(timezone=True), existing_type=postgresql.TIMESTAMP(),
                    existing_nullable=False)
    op.alter_column('permissions', 'deleted_at', type_=sa.DateTime(timezone=True), existing_type=postgresql.TIMESTAMP(),
                    existing_nullable=True)

    # --- REFRESH_TOKENS: ID to BIGINT IDENTITY, Timestamps to TIMESTAMPTZ ---
    op.add_column('refresh_tokens', sa.Column('id_new', sa.BigInteger, nullable=True))
    op.execute("""
        WITH numbered AS (SELECT ctid, ROW_NUMBER() OVER (ORDER BY created_at) + 9999 AS new_id FROM refresh_tokens)
        UPDATE refresh_tokens r SET id_new = n.new_id FROM numbered n WHERE r.ctid = n.ctid;
    """)
    op.alter_column('refresh_tokens', 'id_new', existing_type=sa.BigInteger, nullable=False)  # SET NOT NULL
    op.execute("ALTER TABLE refresh_tokens ALTER COLUMN id_new ADD GENERATED ALWAYS AS IDENTITY (START WITH 10000);")

    op.alter_column('refresh_tokens', 'created_at', type_=sa.DateTime(timezone=True),
                    existing_type=postgresql.TIMESTAMP(), existing_nullable=False)
    op.alter_column('refresh_tokens', 'updated_at', type_=sa.DateTime(timezone=True),
                    existing_type=postgresql.TIMESTAMP(), existing_nullable=False)
    op.alter_column('refresh_tokens', 'deleted_at', type_=sa.DateTime(timezone=True),
                    existing_type=postgresql.TIMESTAMP(), existing_nullable=True)

    # --- ROLES: ID to BIGINT IDENTITY, Timestamps to TIMESTAMPTZ ---
    op.add_column('roles', sa.Column('id_new', sa.BigInteger, nullable=True))
    op.execute("""
        WITH numbered AS (SELECT ctid, ROW_NUMBER() OVER (ORDER BY created_at) + 9999 AS new_id FROM roles)
        UPDATE roles r SET id_new = n.new_id FROM numbered n WHERE r.ctid = n.ctid;
    """)
    op.alter_column('roles', 'id_new', existing_type=sa.BigInteger, nullable=False)  # SET NOT NULL
    op.execute("ALTER TABLE roles ALTER COLUMN id_new ADD GENERATED ALWAYS AS IDENTITY (START WITH 10000);")

    op.alter_column('roles', 'created_at', type_=sa.DateTime(timezone=True), existing_type=postgresql.TIMESTAMP(),
                    existing_nullable=False)
    op.alter_column('roles', 'updated_at', type_=sa.DateTime(timezone=True), existing_type=postgresql.TIMESTAMP(),
                    existing_nullable=False)
    op.alter_column('roles', 'deleted_at', type_=sa.DateTime(timezone=True), existing_type=postgresql.TIMESTAMP(),
                    existing_nullable=True)

    # --- ROLE_PERMISSION: Add new FK columns ---
    with op.batch_alter_table('role_permission') as batch_op:
        batch_op.add_column(sa.Column('role_id_new', sa.BigInteger(), nullable=True))
        batch_op.add_column(sa.Column('permission_id_new', sa.BigInteger(), nullable=True))

    # --- USERS: Timestamps to TIMESTAMPTZ, Add new FK column ---
    op.alter_column('users', 'created_at', type_=sa.DateTime(timezone=True), existing_type=postgresql.TIMESTAMP(),
                    existing_nullable=False)
    op.alter_column('users', 'updated_at', type_=sa.DateTime(timezone=True), existing_type=postgresql.TIMESTAMP(),
                    existing_nullable=False)
    op.alter_column('users', 'deleted_at', type_=sa.DateTime(timezone=True), existing_type=postgresql.TIMESTAMP(),
                    existing_nullable=True)
    op.add_column('users', sa.Column('role_id_new', sa.BigInteger, nullable=True))

    # --- POPULATE NEW FK COLUMNS ---
    op.execute("""
        UPDATE role_permission rp SET
            role_id_new = r.id_new,
            permission_id_new = p.id_new
        FROM roles r, permissions p
        WHERE rp.role_id = r.id AND rp.permission_id = p.id;
    """)
    op.execute("""
        UPDATE users u SET role_id_new = r.id_new
        FROM roles r WHERE u.role_id = r.id;
    """)

    # --- SET NEW FK COLUMNS TO NOT NULL ---
    op.alter_column('role_permission', 'role_id_new', existing_type=sa.BigInteger, nullable=False)
    op.alter_column('role_permission', 'permission_id_new', existing_type=sa.BigInteger, nullable=False)
    op.alter_column('users', 'role_id_new', existing_type=sa.BigInteger, nullable=False)

    # --- DROP OLD FOREIGN KEYS FIRST (to allow dropping PKs they depend on) ---
    op.drop_constraint("role_permission_role_id_fkey", 'role_permission', type_='foreignkey')
    op.drop_constraint("role_permission_permission_id_fkey", 'role_permission', type_='foreignkey')
    op.drop_constraint("users_role_id_fkey", "users", type_="foreignkey")

    # --- DROP OLD PRIMARY KEYS ---
    op.drop_constraint('roles_pkey', 'roles', type_='primary')
    op.drop_constraint('permissions_pkey', 'permissions', type_='primary')
    op.drop_constraint('refresh_tokens_pkey', 'refresh_tokens', type_='primary')
    op.drop_constraint('role_permission_pkey', 'role_permission', type_='primary')  # PK of join table

    # --- CREATE NEW PRIMARY KEYS (on _new columns) ---
    op.create_primary_key("pk_permissions_id_new", 'permissions', ["id_new"])
    op.create_primary_key("pk_roles_id_new", 'roles', ["id_new"])
    op.create_primary_key('pk_rf_id_new', 'refresh_tokens', ["id_new"])  # For refresh_tokens
    op.create_primary_key("pk_role_permission_new", "role_permission", ["role_id_new", "permission_id_new"])

    # --- DROP OLD ID COLUMNS ---
    op.drop_column('roles', 'id')
    op.drop_column('permissions', 'id')
    op.drop_column('refresh_tokens', 'id')
    op.drop_column('role_permission', 'role_id')
    op.drop_column('role_permission', 'permission_id')
    op.drop_column('users', 'role_id')

    # --- RENAME _new ID COLUMNS TO FINAL NAMES ---
    op.alter_column('permissions', 'id_new', new_column_name='id')
    op.alter_column('roles', 'id_new', new_column_name='id')
    op.alter_column('refresh_tokens', 'id_new', new_column_name='id')
    op.alter_column('role_permission', 'role_id_new', new_column_name='role_id')
    op.alter_column('role_permission', 'permission_id_new', new_column_name='permission_id')
    op.alter_column('users', 'role_id_new', new_column_name='role_id')

    # --- CREATE NEW FOREIGN KEYS (referencing final column names) ---
    op.create_foreign_key("fk_role_permission_role_id", "role_permission", "roles", ["role_id"], ["id"],
                          ondelete="CASCADE")
    op.create_foreign_key("fk_role_permission_permission_id", "role_permission", "permissions", ["permission_id"],
                          ["id"], ondelete="CASCADE")
    op.create_foreign_key("fk_users_role_id", "users", "roles", ["role_id"], ["id"])

    # (Optional) Rename constraints to final names if _new was used in PK/FK creation
    op.execute("ALTER TABLE permissions RENAME CONSTRAINT pk_permissions_id_new TO pk_permissions;")
    op.execute("ALTER TABLE roles RENAME CONSTRAINT pk_roles_id_new TO pk_roles;")
    op.execute("ALTER TABLE refresh_tokens RENAME CONSTRAINT pk_rf_id_new TO pk_refresh_tokens;")
    op.execute("ALTER TABLE role_permission RENAME CONSTRAINT pk_role_permission_new TO pk_role_permission;")
    # (FKs were created with final names already)

    # Set sequence to next number
    op.execute("""
        SELECT setval(
            pg_get_serial_sequence('roles', 'id'),
            (SELECT MAX(id) FROM roles),
            true
        );
    """)
    op.execute("""
        SELECT setval(
            pg_get_serial_sequence('permissions', 'id'),
            (SELECT MAX(id) FROM permissions),
            true
        );
    """)
    op.execute("""
        SELECT setval(
            pg_get_serial_sequence('refresh_tokens', 'id'),
            (SELECT MAX(id) FROM refresh_tokens),
            true
        );
    """)

    # ### end Alembic commands ###


# This action is impossible to downgrade
def downgrade() -> None:

    print("This action is impossible to downgrade")
    # Downgrade using backup sql

    # sql_file_path = "E:\postgres_backup\aihub_backup"
    # with open(sql_file_path, "r", encoding="utf-8") as f:
    #     sql_commands = f.read()
    #
    # conn = op.get_bind()
    # conn.execute(sa.text(sql_commands))

    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.alter_column('users', 'role_id',
    #                 existing_type=sa.Integer(),
    #                 type_=sa.UUID(),
    #                 existing_nullable=False)
    # op.alter_column('users', 'deleted_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=True)
    # op.alter_column('users', 'updated_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=False)
    # op.alter_column('users', 'created_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=False)
    # op.alter_column('roles', 'deleted_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=True)
    # op.alter_column('roles', 'updated_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=False)
    # op.alter_column('roles', 'created_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=False)
    # op.alter_column('roles', 'id',
    #                 existing_type=sa.BigInteger(),
    #                 server_default=None,
    #                 type_=sa.UUID(),
    #                 existing_nullable=False,
    #                 autoincrement=True)
    # op.alter_column('role_permission', 'permission_id',
    #                 existing_type=sa.Integer(),
    #                 type_=sa.UUID(),
    #                 existing_nullable=False)
    # op.alter_column('role_permission', 'role_id',
    #                 existing_type=sa.Integer(),
    #                 type_=sa.UUID(),
    #                 existing_nullable=False)
    # op.alter_column('refresh_tokens', 'deleted_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=True)
    # op.alter_column('refresh_tokens', 'updated_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=False)
    # op.alter_column('refresh_tokens', 'created_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=False)
    # op.alter_column('refresh_tokens', 'id',
    #                 existing_type=sa.BigInteger(),
    #                 server_default=None,
    #                 type_=sa.UUID(),
    #                 existing_nullable=False,
    #                 autoincrement=True)
    # op.alter_column('permissions', 'deleted_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=True)
    # op.alter_column('permissions', 'updated_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=False)
    # op.alter_column('permissions', 'created_at',
    #                 existing_type=sa.DateTime(timezone=True),
    #                 type_=postgresql.TIMESTAMP(),
    #                 existing_nullable=False)
    # op.alter_column('permissions', 'id',
    #                 existing_type=sa.BigInteger(),
    #                 server_default=None,
    #                 type_=sa.UUID(),
    #                 existing_nullable=False,
    #                 autoincrement=True)
    # ### end Alembic commands ###
